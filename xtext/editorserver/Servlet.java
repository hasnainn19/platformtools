/*
 * generated by Xtext 2.29.0
 */
package DSLQNAME;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.stream.Collectors;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.epsilon.egl.EglTemplateFactoryModuleAdapter;
import org.eclipse.epsilon.emc.emf.InMemoryEmfModel;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.DisposableRegistry;
import org.eclipse.xtext.web.server.InvalidRequestException;
import org.eclipse.xtext.web.servlet.XtextServlet;

import com.google.gson.Gson;
import com.google.inject.Injector;

import net.sourceforge.plantuml.FileFormat;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.SourceStringReader;

/**
 * Deploy this class into a servlet container to enable DSL-specific services.
 *
 * This particular implementation provides additional services as part of the Xtext tool.
 */
@WebServlet(name = "XtextServices", urlPatterns = "/xtext-service/*")
public class DSLNAMEServlet extends XtextServlet {

    private static final long serialVersionUID = 1L;

    DisposableRegistry disposableRegistry;

    public void init() throws ServletException {
        super.init();
        Injector injector = new DSLNAMEWebSetup().createInjectorAndDoEMFRegistration();
        this.disposableRegistry = injector.getInstance(DisposableRegistry.class);
    }

    private class ToXMIResponse {
        public String output;
    }

    private class ErrorResponse {
        public String error;
    }

    private class ToDiagramResponse {
        public String diagram;
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String serviceID = req.getPathInfo().substring(1);
        if ("to-xmi".equals(serviceID)) {
            String sResult = exportXMI(req);

            if (sResult != "") {
                resp.setStatus(200);
                resp.setContentType("application/json");

                ToXMIResponse r = new ToXMIResponse();
                r.output = sResult;

                PrintWriter pw = resp.getWriter();

                pw.print(new Gson().toJson(r));

                pw.close();
            } else {
                resp.setStatus(200);
                resp.setContentType("application/json");

                ErrorResponse r = new ErrorResponse();
                r.error = "Unable to generate XMI.";

                PrintWriter pw = resp.getWriter();

                pw.print(new Gson().toJson(r));

                pw.close();
            }
        } else if ("to-diagram".equals(serviceID)) {
            String sResult = exportDiagram(req);

            if (sResult != "") {
                resp.setStatus(200);
                resp.setContentType("application/json");

                ToDiagramResponse r = new ToDiagramResponse();
                r.diagram = sResult;

                PrintWriter pw = resp.getWriter();

                pw.print(new Gson().toJson(r));

                pw.close();
            } else {
                resp.setStatus(200);
                resp.setContentType("application/json");

                ErrorResponse r = new ErrorResponse();
                r.error = "Unable to generate XMI.";

                PrintWriter pw = resp.getWriter();

                pw.print(new Gson().toJson(r));

                pw.close();
            }
        } else {
            super.doPost(req, resp);
        }
    }

    private class RequestStructure {
        public String input;
    }

    /**
     * Handles the 'to-xmi' command by transforming the model code in parameter 'input', given in the Xtext format of the DSML managed by this editor, into a regular XMI file.
     */
    private String exportXMI(HttpServletRequest req)
            throws InvalidRequestException.UnknownLanguageException, IOException {
        StringBuffer jb = new StringBuffer();
        String line = null;
        BufferedReader reader = req.getReader();
        while ((line = reader.readLine()) != null)
            jb.append(line);

        RequestStructure reqObj = new Gson().fromJson(jb.toString(), RequestStructure.class);

        URI emfURI = URI.createURI("input.LANGUAGE_EXT");
        IResourceServiceProvider resourceServiceProvider = IResourceServiceProvider.Registry.INSTANCE
                .getResourceServiceProvider(emfURI);
        if (resourceServiceProvider == null) {
            throw new InvalidRequestException.UnknownLanguageException("Unable to identify the Xtext language.");
        }

        Injector injector = resourceServiceProvider.get(Injector.class);

        XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);

        Resource xtextResource = resourceSet.createResource(emfURI);
        xtextResource.load(new ByteArrayInputStream(reqObj.input.getBytes()), null);
        EcoreUtil.resolveAll(xtextResource);

        Resource xmiResource = resourceSet.createResource(URI.createFileURI("result.xmi"));
        xmiResource.getContents().add(xtextResource.getContents().get(0));
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            xmiResource.save(baos, null);
            return baos.toString();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "";
    }

    /**
     * Handles the 'to-diagram' command by transforming the model code in parameter 'input', given in the Xtext format of the DSML managed by this editor, into an SVG object diagram generated by PlantUML.
     */
    private String exportDiagram(HttpServletRequest req)
            throws InvalidRequestException.UnknownLanguageException, IOException {
        StringBuffer jb = new StringBuffer();
        String line = null;
        BufferedReader reader = req.getReader();
        while ((line = reader.readLine()) != null)
            jb.append(line);

        RequestStructure reqObj = new Gson().fromJson(jb.toString(), RequestStructure.class);

        URI emfURI = URI.createURI("input.LANGUAGE_EXT");
        IResourceServiceProvider resourceServiceProvider = IResourceServiceProvider.Registry.INSTANCE
                .getResourceServiceProvider(emfURI);
        if (resourceServiceProvider == null) {
            throw new InvalidRequestException.UnknownLanguageException("Unable to identify the Xtext language.");
        }

        Injector injector = resourceServiceProvider.get(Injector.class);

        XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);

        Resource xtextResource = resourceSet.createResource(emfURI);
        xtextResource.load(new ByteArrayInputStream(reqObj.input.getBytes()), null);
        EcoreUtil.resolveAll(xtextResource);

        try {
            EglTemplateFactoryModuleAdapter module = new EglTemplateFactoryModuleAdapter();

            String eglCode = new BufferedReader(
                    new InputStreamReader(getClass().getResourceAsStream("model2plantuml.egl"))).lines()
                    .collect(Collectors.joining("\n"));
            module.parse(eglCode);

            InMemoryEmfModel model = new InMemoryEmfModel(xtextResource);
            model.setName("M");

            module.getContext().getModelRepository().addModel(model);
            String plantUml = module.execute() + "";

            SourceStringReader ssr = new SourceStringReader(plantUml);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ssr.outputImage(os, new FileFormatOption(FileFormat.SVG));
            os.close();

            return new String(os.toByteArray(), Charset.forName("UTF-8"));
        } catch (Exception e) {
            throw new IOException(e);
        }
    }

    public void destroy() {
        if (disposableRegistry != null) {
            disposableRegistry.dispose();
            disposableRegistry = null;
        }
        super.destroy();
    }
}
